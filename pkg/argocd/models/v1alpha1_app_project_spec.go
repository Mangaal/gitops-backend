// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1AppProjectSpec AppProjectSpec is the specification of an AppProject
//
// swagger:model v1alpha1AppProjectSpec
type V1alpha1AppProjectSpec struct {

	// ClusterResourceWhitelist contains list of whitelisted cluster level resources
	ClusterResourceWhitelist []*V1GroupKind `json:"clusterResourceWhitelist"`

	// Description contains optional project description
	Description string `json:"description,omitempty"`

	// Destinations contains list of destinations available for deployment
	Destinations []*V1alpha1ApplicationDestination `json:"destinations"`

	// NamespaceResourceBlacklist contains list of blacklisted namespace level resources
	NamespaceResourceBlacklist []*V1GroupKind `json:"namespaceResourceBlacklist"`

	// NamespaceResourceWhitelist contains list of whitelisted namespace level resources
	NamespaceResourceWhitelist []*V1GroupKind `json:"namespaceResourceWhitelist"`

	// orphaned resources
	OrphanedResources *V1alpha1OrphanedResourcesMonitorSettings `json:"orphanedResources,omitempty"`

	// Roles are user defined RBAC roles associated with this project
	Roles []*V1alpha1ProjectRole `json:"roles"`

	// SourceRepos contains list of repository URLs which can be used for deployment
	SourceRepos []string `json:"sourceRepos"`

	// SyncWindows controls when syncs can be run for apps in this project
	SyncWindows []*V1alpha1SyncWindow `json:"syncWindows"`
}

// Validate validates this v1alpha1 app project spec
func (m *V1alpha1AppProjectSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterResourceWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceResourceBlacklist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceResourceWhitelist(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrphanedResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyncWindows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1AppProjectSpec) validateClusterResourceWhitelist(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterResourceWhitelist) { // not required
		return nil
	}

	for i := 0; i < len(m.ClusterResourceWhitelist); i++ {
		if swag.IsZero(m.ClusterResourceWhitelist[i]) { // not required
			continue
		}

		if m.ClusterResourceWhitelist[i] != nil {
			if err := m.ClusterResourceWhitelist[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clusterResourceWhitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1AppProjectSpec) validateDestinations(formats strfmt.Registry) error {

	if swag.IsZero(m.Destinations) { // not required
		return nil
	}

	for i := 0; i < len(m.Destinations); i++ {
		if swag.IsZero(m.Destinations[i]) { // not required
			continue
		}

		if m.Destinations[i] != nil {
			if err := m.Destinations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("destinations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1AppProjectSpec) validateNamespaceResourceBlacklist(formats strfmt.Registry) error {

	if swag.IsZero(m.NamespaceResourceBlacklist) { // not required
		return nil
	}

	for i := 0; i < len(m.NamespaceResourceBlacklist); i++ {
		if swag.IsZero(m.NamespaceResourceBlacklist[i]) { // not required
			continue
		}

		if m.NamespaceResourceBlacklist[i] != nil {
			if err := m.NamespaceResourceBlacklist[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("namespaceResourceBlacklist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1AppProjectSpec) validateNamespaceResourceWhitelist(formats strfmt.Registry) error {

	if swag.IsZero(m.NamespaceResourceWhitelist) { // not required
		return nil
	}

	for i := 0; i < len(m.NamespaceResourceWhitelist); i++ {
		if swag.IsZero(m.NamespaceResourceWhitelist[i]) { // not required
			continue
		}

		if m.NamespaceResourceWhitelist[i] != nil {
			if err := m.NamespaceResourceWhitelist[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("namespaceResourceWhitelist" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1AppProjectSpec) validateOrphanedResources(formats strfmt.Registry) error {

	if swag.IsZero(m.OrphanedResources) { // not required
		return nil
	}

	if m.OrphanedResources != nil {
		if err := m.OrphanedResources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orphanedResources")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1AppProjectSpec) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1AppProjectSpec) validateSyncWindows(formats strfmt.Registry) error {

	if swag.IsZero(m.SyncWindows) { // not required
		return nil
	}

	for i := 0; i < len(m.SyncWindows); i++ {
		if swag.IsZero(m.SyncWindows[i]) { // not required
			continue
		}

		if m.SyncWindows[i] != nil {
			if err := m.SyncWindows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("syncWindows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1AppProjectSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1AppProjectSpec) UnmarshalBinary(b []byte) error {
	var res V1alpha1AppProjectSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
