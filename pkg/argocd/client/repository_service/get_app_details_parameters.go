// Code generated by go-swagger; DO NOT EDIT.

package repository_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/rhd-gitops-examples/gitops-backend/pkg/argocd/models"
)

// NewGetAppDetailsParams creates a new GetAppDetailsParams object
// with the default values initialized.
func NewGetAppDetailsParams() *GetAppDetailsParams {
	var ()
	return &GetAppDetailsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAppDetailsParamsWithTimeout creates a new GetAppDetailsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAppDetailsParamsWithTimeout(timeout time.Duration) *GetAppDetailsParams {
	var ()
	return &GetAppDetailsParams{

		timeout: timeout,
	}
}

// NewGetAppDetailsParamsWithContext creates a new GetAppDetailsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAppDetailsParamsWithContext(ctx context.Context) *GetAppDetailsParams {
	var ()
	return &GetAppDetailsParams{

		Context: ctx,
	}
}

// NewGetAppDetailsParamsWithHTTPClient creates a new GetAppDetailsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAppDetailsParamsWithHTTPClient(client *http.Client) *GetAppDetailsParams {
	var ()
	return &GetAppDetailsParams{
		HTTPClient: client,
	}
}

/*GetAppDetailsParams contains all the parameters to send to the API endpoint
for the get app details operation typically these are written to a http.Request
*/
type GetAppDetailsParams struct {

	/*Body*/
	Body *models.RepositoryRepoAppDetailsQuery
	/*SourceRepoURL*/
	SourceRepoURL string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get app details params
func (o *GetAppDetailsParams) WithTimeout(timeout time.Duration) *GetAppDetailsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get app details params
func (o *GetAppDetailsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get app details params
func (o *GetAppDetailsParams) WithContext(ctx context.Context) *GetAppDetailsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get app details params
func (o *GetAppDetailsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get app details params
func (o *GetAppDetailsParams) WithHTTPClient(client *http.Client) *GetAppDetailsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get app details params
func (o *GetAppDetailsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the get app details params
func (o *GetAppDetailsParams) WithBody(body *models.RepositoryRepoAppDetailsQuery) *GetAppDetailsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the get app details params
func (o *GetAppDetailsParams) SetBody(body *models.RepositoryRepoAppDetailsQuery) {
	o.Body = body
}

// WithSourceRepoURL adds the sourceRepoURL to the get app details params
func (o *GetAppDetailsParams) WithSourceRepoURL(sourceRepoURL string) *GetAppDetailsParams {
	o.SetSourceRepoURL(sourceRepoURL)
	return o
}

// SetSourceRepoURL adds the sourceRepoUrl to the get app details params
func (o *GetAppDetailsParams) SetSourceRepoURL(sourceRepoURL string) {
	o.SourceRepoURL = sourceRepoURL
}

// WriteToRequest writes these params to a swagger request
func (o *GetAppDetailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param source.repoURL
	if err := r.SetPathParam("source.repoURL", o.SourceRepoURL); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
