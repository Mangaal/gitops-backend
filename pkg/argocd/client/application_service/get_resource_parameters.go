// Code generated by go-swagger; DO NOT EDIT.

package application_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetResourceParams creates a new GetResourceParams object
// with the default values initialized.
func NewGetResourceParams() *GetResourceParams {
	var ()
	return &GetResourceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetResourceParamsWithTimeout creates a new GetResourceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetResourceParamsWithTimeout(timeout time.Duration) *GetResourceParams {
	var ()
	return &GetResourceParams{

		timeout: timeout,
	}
}

// NewGetResourceParamsWithContext creates a new GetResourceParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetResourceParamsWithContext(ctx context.Context) *GetResourceParams {
	var ()
	return &GetResourceParams{

		Context: ctx,
	}
}

// NewGetResourceParamsWithHTTPClient creates a new GetResourceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetResourceParamsWithHTTPClient(client *http.Client) *GetResourceParams {
	var ()
	return &GetResourceParams{
		HTTPClient: client,
	}
}

/*GetResourceParams contains all the parameters to send to the API endpoint
for the get resource operation typically these are written to a http.Request
*/
type GetResourceParams struct {

	/*Group*/
	Group *string
	/*Kind*/
	Kind *string
	/*Name*/
	Name string
	/*Namespace*/
	Namespace *string
	/*ResourceName*/
	ResourceName *string
	/*Version*/
	Version *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get resource params
func (o *GetResourceParams) WithTimeout(timeout time.Duration) *GetResourceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get resource params
func (o *GetResourceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get resource params
func (o *GetResourceParams) WithContext(ctx context.Context) *GetResourceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get resource params
func (o *GetResourceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get resource params
func (o *GetResourceParams) WithHTTPClient(client *http.Client) *GetResourceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get resource params
func (o *GetResourceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroup adds the group to the get resource params
func (o *GetResourceParams) WithGroup(group *string) *GetResourceParams {
	o.SetGroup(group)
	return o
}

// SetGroup adds the group to the get resource params
func (o *GetResourceParams) SetGroup(group *string) {
	o.Group = group
}

// WithKind adds the kind to the get resource params
func (o *GetResourceParams) WithKind(kind *string) *GetResourceParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the get resource params
func (o *GetResourceParams) SetKind(kind *string) {
	o.Kind = kind
}

// WithName adds the name to the get resource params
func (o *GetResourceParams) WithName(name string) *GetResourceParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get resource params
func (o *GetResourceParams) SetName(name string) {
	o.Name = name
}

// WithNamespace adds the namespace to the get resource params
func (o *GetResourceParams) WithNamespace(namespace *string) *GetResourceParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the get resource params
func (o *GetResourceParams) SetNamespace(namespace *string) {
	o.Namespace = namespace
}

// WithResourceName adds the resourceName to the get resource params
func (o *GetResourceParams) WithResourceName(resourceName *string) *GetResourceParams {
	o.SetResourceName(resourceName)
	return o
}

// SetResourceName adds the resourceName to the get resource params
func (o *GetResourceParams) SetResourceName(resourceName *string) {
	o.ResourceName = resourceName
}

// WithVersion adds the version to the get resource params
func (o *GetResourceParams) WithVersion(version *string) *GetResourceParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the get resource params
func (o *GetResourceParams) SetVersion(version *string) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *GetResourceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Group != nil {

		// query param group
		var qrGroup string
		if o.Group != nil {
			qrGroup = *o.Group
		}
		qGroup := qrGroup
		if qGroup != "" {
			if err := r.SetQueryParam("group", qGroup); err != nil {
				return err
			}
		}

	}

	if o.Kind != nil {

		// query param kind
		var qrKind string
		if o.Kind != nil {
			qrKind = *o.Kind
		}
		qKind := qrKind
		if qKind != "" {
			if err := r.SetQueryParam("kind", qKind); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.Namespace != nil {

		// query param namespace
		var qrNamespace string
		if o.Namespace != nil {
			qrNamespace = *o.Namespace
		}
		qNamespace := qrNamespace
		if qNamespace != "" {
			if err := r.SetQueryParam("namespace", qNamespace); err != nil {
				return err
			}
		}

	}

	if o.ResourceName != nil {

		// query param resourceName
		var qrResourceName string
		if o.ResourceName != nil {
			qrResourceName = *o.ResourceName
		}
		qResourceName := qrResourceName
		if qResourceName != "" {
			if err := r.SetQueryParam("resourceName", qResourceName); err != nil {
				return err
			}
		}

	}

	if o.Version != nil {

		// query param version
		var qrVersion string
		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := qrVersion
		if qVersion != "" {
			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
