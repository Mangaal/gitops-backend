// Code generated by go-swagger; DO NOT EDIT.

package application_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListResourceEventsParams creates a new ListResourceEventsParams object
// with the default values initialized.
func NewListResourceEventsParams() *ListResourceEventsParams {
	var ()
	return &ListResourceEventsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListResourceEventsParamsWithTimeout creates a new ListResourceEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListResourceEventsParamsWithTimeout(timeout time.Duration) *ListResourceEventsParams {
	var ()
	return &ListResourceEventsParams{

		timeout: timeout,
	}
}

// NewListResourceEventsParamsWithContext creates a new ListResourceEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListResourceEventsParamsWithContext(ctx context.Context) *ListResourceEventsParams {
	var ()
	return &ListResourceEventsParams{

		Context: ctx,
	}
}

// NewListResourceEventsParamsWithHTTPClient creates a new ListResourceEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListResourceEventsParamsWithHTTPClient(client *http.Client) *ListResourceEventsParams {
	var ()
	return &ListResourceEventsParams{
		HTTPClient: client,
	}
}

/*ListResourceEventsParams contains all the parameters to send to the API endpoint
for the list resource events operation typically these are written to a http.Request
*/
type ListResourceEventsParams struct {

	/*Name*/
	Name string
	/*ResourceName*/
	ResourceName *string
	/*ResourceNamespace*/
	ResourceNamespace *string
	/*ResourceUID*/
	ResourceUID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list resource events params
func (o *ListResourceEventsParams) WithTimeout(timeout time.Duration) *ListResourceEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list resource events params
func (o *ListResourceEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list resource events params
func (o *ListResourceEventsParams) WithContext(ctx context.Context) *ListResourceEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list resource events params
func (o *ListResourceEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list resource events params
func (o *ListResourceEventsParams) WithHTTPClient(client *http.Client) *ListResourceEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list resource events params
func (o *ListResourceEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the list resource events params
func (o *ListResourceEventsParams) WithName(name string) *ListResourceEventsParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the list resource events params
func (o *ListResourceEventsParams) SetName(name string) {
	o.Name = name
}

// WithResourceName adds the resourceName to the list resource events params
func (o *ListResourceEventsParams) WithResourceName(resourceName *string) *ListResourceEventsParams {
	o.SetResourceName(resourceName)
	return o
}

// SetResourceName adds the resourceName to the list resource events params
func (o *ListResourceEventsParams) SetResourceName(resourceName *string) {
	o.ResourceName = resourceName
}

// WithResourceNamespace adds the resourceNamespace to the list resource events params
func (o *ListResourceEventsParams) WithResourceNamespace(resourceNamespace *string) *ListResourceEventsParams {
	o.SetResourceNamespace(resourceNamespace)
	return o
}

// SetResourceNamespace adds the resourceNamespace to the list resource events params
func (o *ListResourceEventsParams) SetResourceNamespace(resourceNamespace *string) {
	o.ResourceNamespace = resourceNamespace
}

// WithResourceUID adds the resourceUID to the list resource events params
func (o *ListResourceEventsParams) WithResourceUID(resourceUID *string) *ListResourceEventsParams {
	o.SetResourceUID(resourceUID)
	return o
}

// SetResourceUID adds the resourceUid to the list resource events params
func (o *ListResourceEventsParams) SetResourceUID(resourceUID *string) {
	o.ResourceUID = resourceUID
}

// WriteToRequest writes these params to a swagger request
func (o *ListResourceEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.ResourceName != nil {

		// query param resourceName
		var qrResourceName string
		if o.ResourceName != nil {
			qrResourceName = *o.ResourceName
		}
		qResourceName := qrResourceName
		if qResourceName != "" {
			if err := r.SetQueryParam("resourceName", qResourceName); err != nil {
				return err
			}
		}

	}

	if o.ResourceNamespace != nil {

		// query param resourceNamespace
		var qrResourceNamespace string
		if o.ResourceNamespace != nil {
			qrResourceNamespace = *o.ResourceNamespace
		}
		qResourceNamespace := qrResourceNamespace
		if qResourceNamespace != "" {
			if err := r.SetQueryParam("resourceNamespace", qResourceNamespace); err != nil {
				return err
			}
		}

	}

	if o.ResourceUID != nil {

		// query param resourceUID
		var qrResourceUID string
		if o.ResourceUID != nil {
			qrResourceUID = *o.ResourceUID
		}
		qResourceUID := qrResourceUID
		if qResourceUID != "" {
			if err := r.SetQueryParam("resourceUID", qResourceUID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
