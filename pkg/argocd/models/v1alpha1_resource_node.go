// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V1alpha1ResourceNode ResourceNode contains information about live resource and its children
//
// swagger:model v1alpha1ResourceNode
type V1alpha1ResourceNode struct {

	// health
	Health *V1alpha1HealthStatus `json:"health,omitempty"`

	// images
	Images []string `json:"images"`

	// info
	Info []*V1alpha1InfoItem `json:"info"`

	// networking info
	NetworkingInfo *V1alpha1ResourceNetworkingInfo `json:"networkingInfo,omitempty"`

	// parent refs
	ParentRefs []*V1alpha1ResourceRef `json:"parentRefs"`

	// resource ref
	ResourceRef *V1alpha1ResourceRef `json:"resourceRef,omitempty"`

	// resource version
	ResourceVersion string `json:"resourceVersion,omitempty"`
}

// Validate validates this v1alpha1 resource node
func (m *V1alpha1ResourceNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHealth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkingInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentRefs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V1alpha1ResourceNode) validateHealth(formats strfmt.Registry) error {

	if swag.IsZero(m.Health) { // not required
		return nil
	}

	if m.Health != nil {
		if err := m.Health.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("health")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ResourceNode) validateInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.Info) { // not required
		return nil
	}

	for i := 0; i < len(m.Info); i++ {
		if swag.IsZero(m.Info[i]) { // not required
			continue
		}

		if m.Info[i] != nil {
			if err := m.Info[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("info" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1ResourceNode) validateNetworkingInfo(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkingInfo) { // not required
		return nil
	}

	if m.NetworkingInfo != nil {
		if err := m.NetworkingInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkingInfo")
			}
			return err
		}
	}

	return nil
}

func (m *V1alpha1ResourceNode) validateParentRefs(formats strfmt.Registry) error {

	if swag.IsZero(m.ParentRefs) { // not required
		return nil
	}

	for i := 0; i < len(m.ParentRefs); i++ {
		if swag.IsZero(m.ParentRefs[i]) { // not required
			continue
		}

		if m.ParentRefs[i] != nil {
			if err := m.ParentRefs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parentRefs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V1alpha1ResourceNode) validateResourceRef(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceRef) { // not required
		return nil
	}

	if m.ResourceRef != nil {
		if err := m.ResourceRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resourceRef")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V1alpha1ResourceNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V1alpha1ResourceNode) UnmarshalBinary(b []byte) error {
	var res V1alpha1ResourceNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
