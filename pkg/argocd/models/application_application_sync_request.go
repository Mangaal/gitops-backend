// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ApplicationApplicationSyncRequest ApplicationSyncRequest is a request to apply the config state to live state
//
// swagger:model applicationApplicationSyncRequest
type ApplicationApplicationSyncRequest struct {

	// dry run
	DryRun bool `json:"dryRun,omitempty"`

	// infos
	Infos []*V1alpha1Info `json:"infos"`

	// manifests
	Manifests []string `json:"manifests"`

	// name
	Name string `json:"name,omitempty"`

	// prune
	Prune bool `json:"prune,omitempty"`

	// resources
	Resources []*V1alpha1SyncOperationResource `json:"resources"`

	// revision
	Revision string `json:"revision,omitempty"`

	// strategy
	Strategy *V1alpha1SyncStrategy `json:"strategy,omitempty"`
}

// Validate validates this application application sync request
func (m *ApplicationApplicationSyncRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInfos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrategy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ApplicationApplicationSyncRequest) validateInfos(formats strfmt.Registry) error {

	if swag.IsZero(m.Infos) { // not required
		return nil
	}

	for i := 0; i < len(m.Infos); i++ {
		if swag.IsZero(m.Infos[i]) { // not required
			continue
		}

		if m.Infos[i] != nil {
			if err := m.Infos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("infos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationApplicationSyncRequest) validateResources(formats strfmt.Registry) error {

	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	for i := 0; i < len(m.Resources); i++ {
		if swag.IsZero(m.Resources[i]) { // not required
			continue
		}

		if m.Resources[i] != nil {
			if err := m.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ApplicationApplicationSyncRequest) validateStrategy(formats strfmt.Registry) error {

	if swag.IsZero(m.Strategy) { // not required
		return nil
	}

	if m.Strategy != nil {
		if err := m.Strategy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("strategy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ApplicationApplicationSyncRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ApplicationApplicationSyncRequest) UnmarshalBinary(b []byte) error {
	var res ApplicationApplicationSyncRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
