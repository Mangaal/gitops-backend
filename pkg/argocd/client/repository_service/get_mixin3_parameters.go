// Code generated by go-swagger; DO NOT EDIT.

package repository_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetMixin3Params creates a new GetMixin3Params object
// with the default values initialized.
func NewGetMixin3Params() *GetMixin3Params {
	var ()
	return &GetMixin3Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetMixin3ParamsWithTimeout creates a new GetMixin3Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetMixin3ParamsWithTimeout(timeout time.Duration) *GetMixin3Params {
	var ()
	return &GetMixin3Params{

		timeout: timeout,
	}
}

// NewGetMixin3ParamsWithContext creates a new GetMixin3Params object
// with the default values initialized, and the ability to set a context for a request
func NewGetMixin3ParamsWithContext(ctx context.Context) *GetMixin3Params {
	var ()
	return &GetMixin3Params{

		Context: ctx,
	}
}

// NewGetMixin3ParamsWithHTTPClient creates a new GetMixin3Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetMixin3ParamsWithHTTPClient(client *http.Client) *GetMixin3Params {
	var ()
	return &GetMixin3Params{
		HTTPClient: client,
	}
}

/*GetMixin3Params contains all the parameters to send to the API endpoint
for the get mixin3 operation typically these are written to a http.Request
*/
type GetMixin3Params struct {

	/*ForceRefresh
	  Whether to force a cache refresh on repo's connection state.

	*/
	ForceRefresh *bool
	/*Repo*/
	Repo string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get mixin3 params
func (o *GetMixin3Params) WithTimeout(timeout time.Duration) *GetMixin3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get mixin3 params
func (o *GetMixin3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get mixin3 params
func (o *GetMixin3Params) WithContext(ctx context.Context) *GetMixin3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get mixin3 params
func (o *GetMixin3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get mixin3 params
func (o *GetMixin3Params) WithHTTPClient(client *http.Client) *GetMixin3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get mixin3 params
func (o *GetMixin3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForceRefresh adds the forceRefresh to the get mixin3 params
func (o *GetMixin3Params) WithForceRefresh(forceRefresh *bool) *GetMixin3Params {
	o.SetForceRefresh(forceRefresh)
	return o
}

// SetForceRefresh adds the forceRefresh to the get mixin3 params
func (o *GetMixin3Params) SetForceRefresh(forceRefresh *bool) {
	o.ForceRefresh = forceRefresh
}

// WithRepo adds the repo to the get mixin3 params
func (o *GetMixin3Params) WithRepo(repo string) *GetMixin3Params {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the get mixin3 params
func (o *GetMixin3Params) SetRepo(repo string) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *GetMixin3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ForceRefresh != nil {

		// query param forceRefresh
		var qrForceRefresh bool
		if o.ForceRefresh != nil {
			qrForceRefresh = *o.ForceRefresh
		}
		qForceRefresh := swag.FormatBool(qrForceRefresh)
		if qForceRefresh != "" {
			if err := r.SetQueryParam("forceRefresh", qForceRefresh); err != nil {
				return err
			}
		}

	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
