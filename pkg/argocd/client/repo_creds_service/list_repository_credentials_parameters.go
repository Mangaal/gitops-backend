// Code generated by go-swagger; DO NOT EDIT.

package repo_creds_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListRepositoryCredentialsParams creates a new ListRepositoryCredentialsParams object
// with the default values initialized.
func NewListRepositoryCredentialsParams() *ListRepositoryCredentialsParams {
	var ()
	return &ListRepositoryCredentialsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListRepositoryCredentialsParamsWithTimeout creates a new ListRepositoryCredentialsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListRepositoryCredentialsParamsWithTimeout(timeout time.Duration) *ListRepositoryCredentialsParams {
	var ()
	return &ListRepositoryCredentialsParams{

		timeout: timeout,
	}
}

// NewListRepositoryCredentialsParamsWithContext creates a new ListRepositoryCredentialsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListRepositoryCredentialsParamsWithContext(ctx context.Context) *ListRepositoryCredentialsParams {
	var ()
	return &ListRepositoryCredentialsParams{

		Context: ctx,
	}
}

// NewListRepositoryCredentialsParamsWithHTTPClient creates a new ListRepositoryCredentialsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListRepositoryCredentialsParamsWithHTTPClient(client *http.Client) *ListRepositoryCredentialsParams {
	var ()
	return &ListRepositoryCredentialsParams{
		HTTPClient: client,
	}
}

/*ListRepositoryCredentialsParams contains all the parameters to send to the API endpoint
for the list repository credentials operation typically these are written to a http.Request
*/
type ListRepositoryCredentialsParams struct {

	/*URL
	  Repo URL for query.

	*/
	URL *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list repository credentials params
func (o *ListRepositoryCredentialsParams) WithTimeout(timeout time.Duration) *ListRepositoryCredentialsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list repository credentials params
func (o *ListRepositoryCredentialsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list repository credentials params
func (o *ListRepositoryCredentialsParams) WithContext(ctx context.Context) *ListRepositoryCredentialsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list repository credentials params
func (o *ListRepositoryCredentialsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list repository credentials params
func (o *ListRepositoryCredentialsParams) WithHTTPClient(client *http.Client) *ListRepositoryCredentialsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list repository credentials params
func (o *ListRepositoryCredentialsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithURL adds the url to the list repository credentials params
func (o *ListRepositoryCredentialsParams) WithURL(url *string) *ListRepositoryCredentialsParams {
	o.SetURL(url)
	return o
}

// SetURL adds the url to the list repository credentials params
func (o *ListRepositoryCredentialsParams) SetURL(url *string) {
	o.URL = url
}

// WriteToRequest writes these params to a swagger request
func (o *ListRepositoryCredentialsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.URL != nil {

		// query param url
		var qrURL string
		if o.URL != nil {
			qrURL = *o.URL
		}
		qURL := qrURL
		if qURL != "" {
			if err := r.SetQueryParam("url", qURL); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
