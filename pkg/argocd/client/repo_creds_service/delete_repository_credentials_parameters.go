// Code generated by go-swagger; DO NOT EDIT.

package repo_creds_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteRepositoryCredentialsParams creates a new DeleteRepositoryCredentialsParams object
// with the default values initialized.
func NewDeleteRepositoryCredentialsParams() *DeleteRepositoryCredentialsParams {
	var ()
	return &DeleteRepositoryCredentialsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteRepositoryCredentialsParamsWithTimeout creates a new DeleteRepositoryCredentialsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteRepositoryCredentialsParamsWithTimeout(timeout time.Duration) *DeleteRepositoryCredentialsParams {
	var ()
	return &DeleteRepositoryCredentialsParams{

		timeout: timeout,
	}
}

// NewDeleteRepositoryCredentialsParamsWithContext creates a new DeleteRepositoryCredentialsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteRepositoryCredentialsParamsWithContext(ctx context.Context) *DeleteRepositoryCredentialsParams {
	var ()
	return &DeleteRepositoryCredentialsParams{

		Context: ctx,
	}
}

// NewDeleteRepositoryCredentialsParamsWithHTTPClient creates a new DeleteRepositoryCredentialsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteRepositoryCredentialsParamsWithHTTPClient(client *http.Client) *DeleteRepositoryCredentialsParams {
	var ()
	return &DeleteRepositoryCredentialsParams{
		HTTPClient: client,
	}
}

/*DeleteRepositoryCredentialsParams contains all the parameters to send to the API endpoint
for the delete repository credentials operation typically these are written to a http.Request
*/
type DeleteRepositoryCredentialsParams struct {

	/*URL*/
	URL string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete repository credentials params
func (o *DeleteRepositoryCredentialsParams) WithTimeout(timeout time.Duration) *DeleteRepositoryCredentialsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete repository credentials params
func (o *DeleteRepositoryCredentialsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete repository credentials params
func (o *DeleteRepositoryCredentialsParams) WithContext(ctx context.Context) *DeleteRepositoryCredentialsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete repository credentials params
func (o *DeleteRepositoryCredentialsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete repository credentials params
func (o *DeleteRepositoryCredentialsParams) WithHTTPClient(client *http.Client) *DeleteRepositoryCredentialsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete repository credentials params
func (o *DeleteRepositoryCredentialsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithURL adds the url to the delete repository credentials params
func (o *DeleteRepositoryCredentialsParams) WithURL(url string) *DeleteRepositoryCredentialsParams {
	o.SetURL(url)
	return o
}

// SetURL adds the url to the delete repository credentials params
func (o *DeleteRepositoryCredentialsParams) SetURL(url string) {
	o.URL = url
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteRepositoryCredentialsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param url
	if err := r.SetPathParam("url", o.URL); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
