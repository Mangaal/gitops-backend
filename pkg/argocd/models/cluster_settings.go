// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterSettings cluster settings
//
// swagger:model clusterSettings
type ClusterSettings struct {

	// app label key
	AppLabelKey string `json:"appLabelKey,omitempty"`

	// config management plugins
	ConfigManagementPlugins []*V1alpha1ConfigManagementPlugin `json:"configManagementPlugins"`

	// dex config
	DexConfig *ClusterDexConfig `json:"dexConfig,omitempty"`

	// google analytics
	GoogleAnalytics *ClusterGoogleAnalyticsConfig `json:"googleAnalytics,omitempty"`

	// help
	Help *ClusterHelp `json:"help,omitempty"`

	// kustomize options
	KustomizeOptions *V1alpha1KustomizeOptions `json:"kustomizeOptions,omitempty"`

	// kustomize versions
	KustomizeVersions []string `json:"kustomizeVersions"`

	// oidc config
	OidcConfig *ClusterOIDCConfig `json:"oidcConfig,omitempty"`

	// plugins
	Plugins []*ClusterPlugin `json:"plugins"`

	// resource overrides
	ResourceOverrides map[string]V1alpha1ResourceOverride `json:"resourceOverrides,omitempty"`

	// status badge enabled
	StatusBadgeEnabled bool `json:"statusBadgeEnabled,omitempty"`

	// url
	URL string `json:"url,omitempty"`

	// user logins disabled
	UserLoginsDisabled bool `json:"userLoginsDisabled,omitempty"`
}

// Validate validates this cluster settings
func (m *ClusterSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigManagementPlugins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDexConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGoogleAnalytics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHelp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKustomizeOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOidcConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlugins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceOverrides(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterSettings) validateConfigManagementPlugins(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigManagementPlugins) { // not required
		return nil
	}

	for i := 0; i < len(m.ConfigManagementPlugins); i++ {
		if swag.IsZero(m.ConfigManagementPlugins[i]) { // not required
			continue
		}

		if m.ConfigManagementPlugins[i] != nil {
			if err := m.ConfigManagementPlugins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configManagementPlugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterSettings) validateDexConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.DexConfig) { // not required
		return nil
	}

	if m.DexConfig != nil {
		if err := m.DexConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dexConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSettings) validateGoogleAnalytics(formats strfmt.Registry) error {

	if swag.IsZero(m.GoogleAnalytics) { // not required
		return nil
	}

	if m.GoogleAnalytics != nil {
		if err := m.GoogleAnalytics.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("googleAnalytics")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSettings) validateHelp(formats strfmt.Registry) error {

	if swag.IsZero(m.Help) { // not required
		return nil
	}

	if m.Help != nil {
		if err := m.Help.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("help")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSettings) validateKustomizeOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.KustomizeOptions) { // not required
		return nil
	}

	if m.KustomizeOptions != nil {
		if err := m.KustomizeOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kustomizeOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSettings) validateOidcConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.OidcConfig) { // not required
		return nil
	}

	if m.OidcConfig != nil {
		if err := m.OidcConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oidcConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterSettings) validatePlugins(formats strfmt.Registry) error {

	if swag.IsZero(m.Plugins) { // not required
		return nil
	}

	for i := 0; i < len(m.Plugins); i++ {
		if swag.IsZero(m.Plugins[i]) { // not required
			continue
		}

		if m.Plugins[i] != nil {
			if err := m.Plugins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("plugins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterSettings) validateResourceOverrides(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceOverrides) { // not required
		return nil
	}

	for k := range m.ResourceOverrides {

		if err := validate.Required("resourceOverrides"+"."+k, "body", m.ResourceOverrides[k]); err != nil {
			return err
		}
		if val, ok := m.ResourceOverrides[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterSettings) UnmarshalBinary(b []byte) error {
	var res ClusterSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
