// Code generated by go-swagger; DO NOT EDIT.

package account_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCanIParams creates a new CanIParams object
// with the default values initialized.
func NewCanIParams() *CanIParams {
	var ()
	return &CanIParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCanIParamsWithTimeout creates a new CanIParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCanIParamsWithTimeout(timeout time.Duration) *CanIParams {
	var ()
	return &CanIParams{

		timeout: timeout,
	}
}

// NewCanIParamsWithContext creates a new CanIParams object
// with the default values initialized, and the ability to set a context for a request
func NewCanIParamsWithContext(ctx context.Context) *CanIParams {
	var ()
	return &CanIParams{

		Context: ctx,
	}
}

// NewCanIParamsWithHTTPClient creates a new CanIParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCanIParamsWithHTTPClient(client *http.Client) *CanIParams {
	var ()
	return &CanIParams{
		HTTPClient: client,
	}
}

/*CanIParams contains all the parameters to send to the API endpoint
for the can i operation typically these are written to a http.Request
*/
type CanIParams struct {

	/*Action*/
	Action string
	/*Resource*/
	Resource string
	/*Subresource*/
	Subresource string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the can i params
func (o *CanIParams) WithTimeout(timeout time.Duration) *CanIParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the can i params
func (o *CanIParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the can i params
func (o *CanIParams) WithContext(ctx context.Context) *CanIParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the can i params
func (o *CanIParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the can i params
func (o *CanIParams) WithHTTPClient(client *http.Client) *CanIParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the can i params
func (o *CanIParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAction adds the action to the can i params
func (o *CanIParams) WithAction(action string) *CanIParams {
	o.SetAction(action)
	return o
}

// SetAction adds the action to the can i params
func (o *CanIParams) SetAction(action string) {
	o.Action = action
}

// WithResource adds the resource to the can i params
func (o *CanIParams) WithResource(resource string) *CanIParams {
	o.SetResource(resource)
	return o
}

// SetResource adds the resource to the can i params
func (o *CanIParams) SetResource(resource string) {
	o.Resource = resource
}

// WithSubresource adds the subresource to the can i params
func (o *CanIParams) WithSubresource(subresource string) *CanIParams {
	o.SetSubresource(subresource)
	return o
}

// SetSubresource adds the subresource to the can i params
func (o *CanIParams) SetSubresource(subresource string) {
	o.Subresource = subresource
}

// WriteToRequest writes these params to a swagger request
func (o *CanIParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param action
	if err := r.SetPathParam("action", o.Action); err != nil {
		return err
	}

	// path param resource
	if err := r.SetPathParam("resource", o.Resource); err != nil {
		return err
	}

	// path param subresource
	if err := r.SetPathParam("subresource", o.Subresource); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
