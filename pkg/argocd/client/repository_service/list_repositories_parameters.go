// Code generated by go-swagger; DO NOT EDIT.

package repository_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListRepositoriesParams creates a new ListRepositoriesParams object
// with the default values initialized.
func NewListRepositoriesParams() *ListRepositoriesParams {
	var ()
	return &ListRepositoriesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListRepositoriesParamsWithTimeout creates a new ListRepositoriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListRepositoriesParamsWithTimeout(timeout time.Duration) *ListRepositoriesParams {
	var ()
	return &ListRepositoriesParams{

		timeout: timeout,
	}
}

// NewListRepositoriesParamsWithContext creates a new ListRepositoriesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListRepositoriesParamsWithContext(ctx context.Context) *ListRepositoriesParams {
	var ()
	return &ListRepositoriesParams{

		Context: ctx,
	}
}

// NewListRepositoriesParamsWithHTTPClient creates a new ListRepositoriesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListRepositoriesParamsWithHTTPClient(client *http.Client) *ListRepositoriesParams {
	var ()
	return &ListRepositoriesParams{
		HTTPClient: client,
	}
}

/*ListRepositoriesParams contains all the parameters to send to the API endpoint
for the list repositories operation typically these are written to a http.Request
*/
type ListRepositoriesParams struct {

	/*ForceRefresh
	  Whether to force a cache refresh on repo's connection state.

	*/
	ForceRefresh *bool
	/*Repo
	  Repo URL for query.

	*/
	Repo *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list repositories params
func (o *ListRepositoriesParams) WithTimeout(timeout time.Duration) *ListRepositoriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list repositories params
func (o *ListRepositoriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list repositories params
func (o *ListRepositoriesParams) WithContext(ctx context.Context) *ListRepositoriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list repositories params
func (o *ListRepositoriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list repositories params
func (o *ListRepositoriesParams) WithHTTPClient(client *http.Client) *ListRepositoriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list repositories params
func (o *ListRepositoriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForceRefresh adds the forceRefresh to the list repositories params
func (o *ListRepositoriesParams) WithForceRefresh(forceRefresh *bool) *ListRepositoriesParams {
	o.SetForceRefresh(forceRefresh)
	return o
}

// SetForceRefresh adds the forceRefresh to the list repositories params
func (o *ListRepositoriesParams) SetForceRefresh(forceRefresh *bool) {
	o.ForceRefresh = forceRefresh
}

// WithRepo adds the repo to the list repositories params
func (o *ListRepositoriesParams) WithRepo(repo *string) *ListRepositoriesParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the list repositories params
func (o *ListRepositoriesParams) SetRepo(repo *string) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *ListRepositoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ForceRefresh != nil {

		// query param forceRefresh
		var qrForceRefresh bool
		if o.ForceRefresh != nil {
			qrForceRefresh = *o.ForceRefresh
		}
		qForceRefresh := swag.FormatBool(qrForceRefresh)
		if qForceRefresh != "" {
			if err := r.SetQueryParam("forceRefresh", qForceRefresh); err != nil {
				return err
			}
		}

	}

	if o.Repo != nil {

		// query param repo
		var qrRepo string
		if o.Repo != nil {
			qrRepo = *o.Repo
		}
		qRepo := qrRepo
		if qRepo != "" {
			if err := r.SetQueryParam("repo", qRepo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
