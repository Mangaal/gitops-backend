// Code generated by go-swagger; DO NOT EDIT.

package project_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateMixin6(params *CreateMixin6Params) (*CreateMixin6OK, error)

	CreateToken(params *CreateTokenParams) (*CreateTokenOK, error)

	DeleteMixin6(params *DeleteMixin6Params) (*DeleteMixin6OK, error)

	DeleteToken(params *DeleteTokenParams) (*DeleteTokenOK, error)

	GetMixin6(params *GetMixin6Params) (*GetMixin6OK, error)

	GetSyncWindowsState(params *GetSyncWindowsStateParams) (*GetSyncWindowsStateOK, error)

	ListEvents(params *ListEventsParams) (*ListEventsOK, error)

	ListMixin6(params *ListMixin6Params) (*ListMixin6OK, error)

	UpdateMixin6(params *UpdateMixin6Params) (*UpdateMixin6OK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateMixin6 creates a new project
*/
func (a *Client) CreateMixin6(params *CreateMixin6Params) (*CreateMixin6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMixin6Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateMixin6",
		Method:             "POST",
		PathPattern:        "/api/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateMixin6Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateMixin6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateMixin6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateToken creates a new project token
*/
func (a *Client) CreateToken(params *CreateTokenParams) (*CreateTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateToken",
		Method:             "POST",
		PathPattern:        "/api/v1/projects/{project}/roles/{role}/token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteMixin6 deletes deletes a project
*/
func (a *Client) DeleteMixin6(params *DeleteMixin6Params) (*DeleteMixin6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMixin6Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteMixin6",
		Method:             "DELETE",
		PathPattern:        "/api/v1/projects/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMixin6Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteMixin6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteMixin6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteToken deletes a new project token
*/
func (a *Client) DeleteToken(params *DeleteTokenParams) (*DeleteTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTokenParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteToken",
		Method:             "DELETE",
		PathPattern:        "/api/v1/projects/{project}/roles/{role}/token/{iat}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTokenReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteToken: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetMixin6 gets returns a project by name
*/
func (a *Client) GetMixin6(params *GetMixin6Params) (*GetMixin6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMixin6Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetMixin6",
		Method:             "GET",
		PathPattern:        "/api/v1/projects/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetMixin6Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetMixin6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetMixin6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSyncWindowsState gets schedules state returns true if there are any active sync sync windows
*/
func (a *Client) GetSyncWindowsState(params *GetSyncWindowsStateParams) (*GetSyncWindowsStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSyncWindowsStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSyncWindowsState",
		Method:             "GET",
		PathPattern:        "/api/v1/projects/{name}/syncwindows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSyncWindowsStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSyncWindowsStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSyncWindowsState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListEvents lists events returns a list of project events
*/
func (a *Client) ListEvents(params *ListEventsParams) (*ListEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListEvents",
		Method:             "GET",
		PathPattern:        "/api/v1/projects/{name}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListMixin6 lists returns list of projects
*/
func (a *Client) ListMixin6(params *ListMixin6Params) (*ListMixin6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListMixin6Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListMixin6",
		Method:             "GET",
		PathPattern:        "/api/v1/projects",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListMixin6Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListMixin6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListMixin6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateMixin6 updates updates a project
*/
func (a *Client) UpdateMixin6(params *UpdateMixin6Params) (*UpdateMixin6OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMixin6Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateMixin6",
		Method:             "PUT",
		PathPattern:        "/api/v1/projects/{project.metadata.name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateMixin6Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateMixin6OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateMixin6: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
