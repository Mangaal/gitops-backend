// Code generated by go-swagger; DO NOT EDIT.

package repo_creds_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new repo creds service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for repo creds service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRepositoryCredentials(params *CreateRepositoryCredentialsParams) (*CreateRepositoryCredentialsOK, error)

	DeleteRepositoryCredentials(params *DeleteRepositoryCredentialsParams) (*DeleteRepositoryCredentialsOK, error)

	ListRepositoryCredentials(params *ListRepositoryCredentialsParams) (*ListRepositoryCredentialsOK, error)

	UpdateRepositoryCredentials(params *UpdateRepositoryCredentialsParams) (*UpdateRepositoryCredentialsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRepositoryCredentials creates repository credentials creates a new repository credential set
*/
func (a *Client) CreateRepositoryCredentials(params *CreateRepositoryCredentialsParams) (*CreateRepositoryCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRepositoryCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateRepositoryCredentials",
		Method:             "POST",
		PathPattern:        "/api/v1/repocreds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRepositoryCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRepositoryCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateRepositoryCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRepositoryCredentials deletes repository credentials deletes a repository credential set from the configuration
*/
func (a *Client) DeleteRepositoryCredentials(params *DeleteRepositoryCredentialsParams) (*DeleteRepositoryCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRepositoryCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteRepositoryCredentials",
		Method:             "DELETE",
		PathPattern:        "/api/v1/repocreds/{url}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRepositoryCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRepositoryCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteRepositoryCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListRepositoryCredentials lists repository credentials gets a list of all configured repository credential sets
*/
func (a *Client) ListRepositoryCredentials(params *ListRepositoryCredentialsParams) (*ListRepositoryCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRepositoryCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListRepositoryCredentials",
		Method:             "GET",
		PathPattern:        "/api/v1/repocreds",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRepositoryCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListRepositoryCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListRepositoryCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateRepositoryCredentials updates repository credentials updates a repository credential set
*/
func (a *Client) UpdateRepositoryCredentials(params *UpdateRepositoryCredentialsParams) (*UpdateRepositoryCredentialsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateRepositoryCredentialsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateRepositoryCredentials",
		Method:             "PUT",
		PathPattern:        "/api/v1/repocreds/{creds.url}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateRepositoryCredentialsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateRepositoryCredentialsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateRepositoryCredentials: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
