// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/argocd/client/application_service/application_service_client.go

// Package mock_application_service is a generated GoMock package.
package argocd

import (
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	application_service "github.com/rhd-gitops-examples/gitops-backend/pkg/argocd/client/application_service"
	reflect "reflect"
)

// MockClientService is a mock of ClientService interface.
type MockClientService struct {
	ctrl     *gomock.Controller
	recorder *MockClientServiceMockRecorder
}

// MockClientServiceMockRecorder is the mock recorder for MockClientService.
type MockClientServiceMockRecorder struct {
	mock *MockClientService
}

// NewMockClientService creates a new mock instance.
func NewMockClientService(ctrl *gomock.Controller) *MockClientService {
	mock := &MockClientService{ctrl: ctrl}
	mock.recorder = &MockClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientService) EXPECT() *MockClientServiceMockRecorder {
	return m.recorder
}

// CreateMixin8 mocks base method.
func (m *MockClientService) CreateMixin8(params *application_service.CreateMixin8Params) (*application_service.CreateMixin8OK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMixin8", params)
	ret0, _ := ret[0].(*application_service.CreateMixin8OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMixin8 indicates an expected call of CreateMixin8.
func (mr *MockClientServiceMockRecorder) CreateMixin8(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMixin8", reflect.TypeOf((*MockClientService)(nil).CreateMixin8), params)
}

// DeleteMixin8 mocks base method.
func (m *MockClientService) DeleteMixin8(params *application_service.DeleteMixin8Params) (*application_service.DeleteMixin8OK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMixin8", params)
	ret0, _ := ret[0].(*application_service.DeleteMixin8OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMixin8 indicates an expected call of DeleteMixin8.
func (mr *MockClientServiceMockRecorder) DeleteMixin8(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMixin8", reflect.TypeOf((*MockClientService)(nil).DeleteMixin8), params)
}

// DeleteResource mocks base method.
func (m *MockClientService) DeleteResource(params *application_service.DeleteResourceParams) (*application_service.DeleteResourceOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", params)
	ret0, _ := ret[0].(*application_service.DeleteResourceOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockClientServiceMockRecorder) DeleteResource(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockClientService)(nil).DeleteResource), params)
}

// GetApplicationSyncWindows mocks base method.
func (m *MockClientService) GetApplicationSyncWindows(params *application_service.GetApplicationSyncWindowsParams) (*application_service.GetApplicationSyncWindowsOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationSyncWindows", params)
	ret0, _ := ret[0].(*application_service.GetApplicationSyncWindowsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationSyncWindows indicates an expected call of GetApplicationSyncWindows.
func (mr *MockClientServiceMockRecorder) GetApplicationSyncWindows(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationSyncWindows", reflect.TypeOf((*MockClientService)(nil).GetApplicationSyncWindows), params)
}

// GetManifests mocks base method.
func (m *MockClientService) GetManifests(params *application_service.GetManifestsParams) (*application_service.GetManifestsOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManifests", params)
	ret0, _ := ret[0].(*application_service.GetManifestsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManifests indicates an expected call of GetManifests.
func (mr *MockClientServiceMockRecorder) GetManifests(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifests", reflect.TypeOf((*MockClientService)(nil).GetManifests), params)
}

// GetMixin8 mocks base method.
func (m *MockClientService) GetMixin8(params *application_service.GetMixin8Params) (*application_service.GetMixin8OK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMixin8", params)
	ret0, _ := ret[0].(*application_service.GetMixin8OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMixin8 indicates an expected call of GetMixin8.
func (mr *MockClientServiceMockRecorder) GetMixin8(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMixin8", reflect.TypeOf((*MockClientService)(nil).GetMixin8), params)
}

// GetResource mocks base method.
func (m *MockClientService) GetResource(params *application_service.GetResourceParams) (*application_service.GetResourceOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", params)
	ret0, _ := ret[0].(*application_service.GetResourceOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockClientServiceMockRecorder) GetResource(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockClientService)(nil).GetResource), params)
}

// ListMixin8 mocks base method.
func (m *MockClientService) ListMixin8(params *application_service.ListMixin8Params) (*application_service.ListMixin8OK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMixin8", params)
	ret0, _ := ret[0].(*application_service.ListMixin8OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMixin8 indicates an expected call of ListMixin8.
func (mr *MockClientServiceMockRecorder) ListMixin8(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMixin8", reflect.TypeOf((*MockClientService)(nil).ListMixin8), params)
}

// ListResourceActions mocks base method.
func (m *MockClientService) ListResourceActions(params *application_service.ListResourceActionsParams) (*application_service.ListResourceActionsOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceActions", params)
	ret0, _ := ret[0].(*application_service.ListResourceActionsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceActions indicates an expected call of ListResourceActions.
func (mr *MockClientServiceMockRecorder) ListResourceActions(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceActions", reflect.TypeOf((*MockClientService)(nil).ListResourceActions), params)
}

// ListResourceEvents mocks base method.
func (m *MockClientService) ListResourceEvents(params *application_service.ListResourceEventsParams) (*application_service.ListResourceEventsOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResourceEvents", params)
	ret0, _ := ret[0].(*application_service.ListResourceEventsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResourceEvents indicates an expected call of ListResourceEvents.
func (mr *MockClientServiceMockRecorder) ListResourceEvents(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResourceEvents", reflect.TypeOf((*MockClientService)(nil).ListResourceEvents), params)
}

// ManagedResources mocks base method.
func (m *MockClientService) ManagedResources(params *application_service.ManagedResourcesParams) (*application_service.ManagedResourcesOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManagedResources", params)
	ret0, _ := ret[0].(*application_service.ManagedResourcesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManagedResources indicates an expected call of ManagedResources.
func (mr *MockClientServiceMockRecorder) ManagedResources(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManagedResources", reflect.TypeOf((*MockClientService)(nil).ManagedResources), params)
}

// Patch mocks base method.
func (m *MockClientService) Patch(params *application_service.PatchParams) (*application_service.PatchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", params)
	ret0, _ := ret[0].(*application_service.PatchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockClientServiceMockRecorder) Patch(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockClientService)(nil).Patch), params)
}

// PatchResource mocks base method.
func (m *MockClientService) PatchResource(params *application_service.PatchResourceParams) (*application_service.PatchResourceOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchResource", params)
	ret0, _ := ret[0].(*application_service.PatchResourceOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PatchResource indicates an expected call of PatchResource.
func (mr *MockClientServiceMockRecorder) PatchResource(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchResource", reflect.TypeOf((*MockClientService)(nil).PatchResource), params)
}

// PodLogs mocks base method.
func (m *MockClientService) PodLogs(params *application_service.PodLogsParams) (*application_service.PodLogsOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PodLogs", params)
	ret0, _ := ret[0].(*application_service.PodLogsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PodLogs indicates an expected call of PodLogs.
func (mr *MockClientServiceMockRecorder) PodLogs(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PodLogs", reflect.TypeOf((*MockClientService)(nil).PodLogs), params)
}

// ResourceTree mocks base method.
func (m *MockClientService) ResourceTree(params *application_service.ResourceTreeParams) (*application_service.ResourceTreeOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceTree", params)
	ret0, _ := ret[0].(*application_service.ResourceTreeOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceTree indicates an expected call of ResourceTree.
func (mr *MockClientServiceMockRecorder) ResourceTree(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceTree", reflect.TypeOf((*MockClientService)(nil).ResourceTree), params)
}

// RevisionMetadata mocks base method.
func (m *MockClientService) RevisionMetadata(params *application_service.RevisionMetadataParams) (*application_service.RevisionMetadataOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevisionMetadata", params)
	ret0, _ := ret[0].(*application_service.RevisionMetadataOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevisionMetadata indicates an expected call of RevisionMetadata.
func (mr *MockClientServiceMockRecorder) RevisionMetadata(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevisionMetadata", reflect.TypeOf((*MockClientService)(nil).RevisionMetadata), params)
}

// Rollback mocks base method.
func (m *MockClientService) Rollback(params *application_service.RollbackParams) (*application_service.RollbackOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", params)
	ret0, _ := ret[0].(*application_service.RollbackOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rollback indicates an expected call of Rollback.
func (mr *MockClientServiceMockRecorder) Rollback(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockClientService)(nil).Rollback), params)
}

// RunResourceAction mocks base method.
func (m *MockClientService) RunResourceAction(params *application_service.RunResourceActionParams) (*application_service.RunResourceActionOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunResourceAction", params)
	ret0, _ := ret[0].(*application_service.RunResourceActionOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunResourceAction indicates an expected call of RunResourceAction.
func (mr *MockClientServiceMockRecorder) RunResourceAction(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunResourceAction", reflect.TypeOf((*MockClientService)(nil).RunResourceAction), params)
}

// Sync mocks base method.
func (m *MockClientService) Sync(params *application_service.SyncParams) (*application_service.SyncOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", params)
	ret0, _ := ret[0].(*application_service.SyncOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync.
func (mr *MockClientServiceMockRecorder) Sync(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockClientService)(nil).Sync), params)
}

// TerminateOperation mocks base method.
func (m *MockClientService) TerminateOperation(params *application_service.TerminateOperationParams) (*application_service.TerminateOperationOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateOperation", params)
	ret0, _ := ret[0].(*application_service.TerminateOperationOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateOperation indicates an expected call of TerminateOperation.
func (mr *MockClientServiceMockRecorder) TerminateOperation(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateOperation", reflect.TypeOf((*MockClientService)(nil).TerminateOperation), params)
}

// UpdateMixin8 mocks base method.
func (m *MockClientService) UpdateMixin8(params *application_service.UpdateMixin8Params) (*application_service.UpdateMixin8OK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMixin8", params)
	ret0, _ := ret[0].(*application_service.UpdateMixin8OK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMixin8 indicates an expected call of UpdateMixin8.
func (mr *MockClientServiceMockRecorder) UpdateMixin8(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMixin8", reflect.TypeOf((*MockClientService)(nil).UpdateMixin8), params)
}

// UpdateSpec mocks base method.
func (m *MockClientService) UpdateSpec(params *application_service.UpdateSpecParams) (*application_service.UpdateSpecOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSpec", params)
	ret0, _ := ret[0].(*application_service.UpdateSpecOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSpec indicates an expected call of UpdateSpec.
func (mr *MockClientServiceMockRecorder) UpdateSpec(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSpec", reflect.TypeOf((*MockClientService)(nil).UpdateSpec), params)
}

// Watch mocks base method.
func (m *MockClientService) Watch(params *application_service.WatchParams) (*application_service.WatchOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", params)
	ret0, _ := ret[0].(*application_service.WatchOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockClientServiceMockRecorder) Watch(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockClientService)(nil).Watch), params)
}

// SetTransport mocks base method.
func (m *MockClientService) SetTransport(transport runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", transport)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockClientServiceMockRecorder) SetTransport(transport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockClientService)(nil).SetTransport), transport)
}
